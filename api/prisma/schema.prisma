// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int   @id @default(autoincrement())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  books       Book[]
  translations Translation[]
  bookmarks   Bookmark[]

  @@map("users")
}

model Book {
  id          Int   @id @default(autoincrement())
  title       String
  author      String
  coverImage  String? @map("cover_image")
  description String?
  language    String   @default("en")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  authorId     Int @map("author_id")
  authorUser   User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  translations Translation[]
  bookmarks    Bookmark[]

  @@map("books")
}

model Translation {
  id           Int   @id @default(autoincrement())
  originalText String @map("original_text")
  translatedText String @map("translated_text")
  sourceLanguage String @default("en") @map("source_language")
  targetLanguage String @map("target_language")
  context      String?
  chapter      String?
  pageNumber   Int? @map("page_number")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  bookId       Int @map("book_id")
  book         Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  translatorId Int @map("translator_id")
  translator   User      @relation(fields: [translatorId], references: [id], onDelete: Cascade)
  bookmarks    Bookmark[]

  @@map("translations")
}

model Bookmark {
  id        Int   @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Relations
  userId        Int
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  translationId Int?
  translation   Translation? @relation(fields: [translationId], references: [id], onDelete: Cascade)
  bookId        Int?
  book          Book?        @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, translationId])
  @@unique([userId, bookId])
  @@map("bookmarks")
}
